---
interface Props {
	id: string;
	height: "auto" | string;
}

const { id, height } = Astro.props;
---

<div class="relative w-full mx-auto px-0 md:px-8 mb-20 md:my-0">
	<div class="relative w-full mx-auto overflow-hidden">
		<!-- Carrusel -->
		<div
			id={id}
			class={`carousel mx-auto flex overflow-hidden scroll-smooth max-w-[300px] min-w-[300px] md:max-w-[600px] md:min-w-[600px] xl:max-w-[750px] xl:min-w-[750px] 2xl:max-w-[900px] 2xl:min-w-[900px]`}
			style={`height: ${height};`}
		>
			<!-- Elementos del Carrusel -->
			<slot />
		</div>
	</div>
	<!-- Botón Izquierda -->
	<button
		class="btn-carousel btn-carousel-prev btn-carousel--inactive absolute -bottom-14 md:top-1/2 left-1/4 md:left-6 lg:-left-6 transform md:-translate-y-1/2 -translate-x-1/2 md:translate-x-0 text-action-text rounded-full size-12 from-action-dark to-action-light text-6xl cursor-pointer"
	>
		<span class="-mt-4 ml-0 block">&#8249;</span>
	</button>
	<!-- Botón Derecha -->
	<button
		class="btn-carousel btn-carousel-next absolute md:top-1/2 left-3/4 -bottom-14 md:left-auto md:right-6 lg:-right-6 transform md:-translate-y-1/2 -translate-x-1/2 md:translate-x-0 text-action-text rounded-full size-12 bg-gradient-to-br from-action-dark to-action-light text-6xl cursor-pointer"
	>
		<span class="-mt-4 ml-0 block">&#8250;</span>
	</button>
</div>

<script>
	const carousels = document.querySelectorAll('.carousel');
	const prevButtons = document.querySelectorAll('.btn-carousel-prev');
	const nextButtons = document.querySelectorAll('.btn-carousel-next');

	function getCardWidth(carousel: Element) {
		const cardWidth = carousel.scrollWidth / carousel?.children?.length;
		return cardWidth;
	}

	function getCarousel(element: Element) {
		const carousel = element.parentNode?.querySelector('.carousel') as Element;
		return carousel;
	}

	function getPrevButton(carousel: Element) {
		return carousel.parentNode?.parentNode?.querySelector('.btn-carousel-prev') as Element;
	}

	function getNextButton(carousel: Element) {
		return carousel.parentNode?.parentNode?.querySelector('.btn-carousel-next') as Element;
	}

	nextButtons?.forEach((nextButton) => {
		const carousel: Element = getCarousel(nextButton);
		if (carousel.scrollWidth === carousel?.clientWidth) {
			nextButton.classList.remove('bg-gradient-to-br');
			nextButton.classList.add('btn-carousel--inactive');
		}
		nextButton.addEventListener('click', () => {
			const carousel: Element = getCarousel(nextButton);
			const prevButton = getPrevButton(carousel);
			const cardWidth = getCardWidth(carousel);
			const actualPosition = carousel.scrollLeft;
			const actualItem = (cardWidth * Math.round(actualPosition / cardWidth)) / cardWidth;
			const futurePosition = cardWidth * (actualItem + 1);
			const incrementScroll = futurePosition - actualPosition;
			carousel?.scrollBy({ left: incrementScroll, behavior: 'smooth' });
			const futurePositionLastPixel = futurePosition + carousel?.clientWidth;
			if (isNaN (futurePositionLastPixel) || futurePositionLastPixel >= carousel.scrollWidth) {
				nextButton.classList.remove('bg-gradient-to-br');
				nextButton.classList.add('btn-carousel--inactive');
			} else {
				prevButton.classList.add('bg-gradient-to-br');
				prevButton.classList.remove('btn-carousel--inactive');
			}
		});
	});

	prevButtons?.forEach((prevButton) => {
		prevButton.addEventListener('click', () => {
			const carousel = getCarousel(prevButton);
			const nextButton = getNextButton(carousel);
			const cardWidth = getCardWidth(carousel);
			const actualPosition = carousel.scrollLeft;
			const actualItem = (cardWidth * Math.round(actualPosition / cardWidth)) / cardWidth;
			const futurePosition = cardWidth * (actualItem - 1);
			const incrementScroll = futurePosition - actualPosition;
			carousel?.scrollBy({ left: incrementScroll, behavior: 'smooth' });
			const existScrollRight = actualPosition + incrementScroll;
			if (existScrollRight <= 0 || isNaN(existScrollRight)) {
				prevButton.classList.remove('bg-gradient-to-br');
				prevButton.classList.add('btn-carousel--inactive');
			} else {
				nextButton.classList.add('bg-gradient-to-br');
				nextButton.classList.remove('btn-carousel--inactive');
			}
		});
	});

	const observerCarousel = (carousel: HTMLDivElement) => new MutationObserver(() => {
		const nextButton = getNextButton(carousel);
		nextButton.classList.remove('bg-gradient-to-br');
		nextButton.classList.add('btn-carousel--inactive');
		const prevButton = getPrevButton(carousel);
		if (carousel.scrollWidth === carousel?.clientWidth) {
			prevButton.classList.remove('bg-gradient-to-br');
			prevButton.classList.add('btn-carousel--inactive');
		} else {
			prevButton.classList.add('bg-gradient-to-br');
			prevButton.classList.remove('btn-carousel--inactive');
		}
		const cardWidth = getCardWidth(carousel);
		carousel?.scrollBy({ left: cardWidth, behavior: 'smooth' });
		setTimeout(()=> carousel?.scrollBy({ left: cardWidth, behavior: 'smooth' }), 200)
	});

	carousels?.forEach((carousel) => {
    	observerCarousel(carousel as HTMLDivElement).observe(carousel, {
			childList: true,
			subtree: true, // por si se insertan hijos dentro de hijos
		});
	});
</script>

<style>
	@reference "../styles/global.css";
	.btn-carousel {
		-webkit-box-shadow:
			2px 2px 12px rgb(0, 0, 0, 0.4),
			-2px -2px 12px rgb(255, 255, 255, 0.4);
		box-shadow:
			2px 2px 12px rgb(0, 0, 0, 0.4),
			-2px -2px 12px rgb(255, 255, 255, 0.4);
		@apply text-action-text;
		-webkit-transition: 500ms;
		transition: 500ms;
	}

	.btn-carousel:hover {
		-webkit-box-shadow:
			2px 2px 12px rgb(0, 0, 0, 0.4),
			-2px -2px 12px rgb(255, 255, 255, 0.4);
		box-shadow:
			2px 2px 12px rgb(0, 0, 0, 0.4),
			-2px -2px 12px rgb(255, 255, 255, 0.4);
		-webkit-transition: 500ms;
		transition: 500ms;
	}

	.btn-carousel:active {
		-webkit-box-shadow:
			4px 4px 16px rgb(0, 0, 0, 0.4),
			-4px -4px 16px rgb(255, 255, 255, 0.4);
		box-shadow:
			4px 4px 16px rgb(0, 0, 0, 0.4),
			-4px -4px 16px rgb(255, 255, 255, 0.4);
		-webkit-transition: 100ms;
		transition: 100ms;
	}
	.btn-carousel--inactive {
		@apply text-default;
		box-shadow:
			inset 4px 4px 16px rgb(0, 0, 0, 0.2),
			inset -4px -4px 16px rgb(255, 255, 255, 0.2);
	}
	.btn-carousel--inactive:hover {
		box-shadow:
			inset 4px 4px 16px rgb(0, 0, 0, 0.2),
			inset -4px -4px 16px rgb(255, 255, 255, 0.2);
	}
	.carousel {
		background: linear-gradient(145deg, rgb(0, 0, 0, 0.2), rgb(255, 255, 255, 0.05));
		border-radius: 25px;
	}
</style>
