---
interface Props {
	texts: {
		language: string;
		title: string;
		description: string;
		inputs: {
			titleUpload: string;
			uploadMessage: string;
			uploadedTitle: string;
			actionsTitle: string;
			width: string;
			height: string;
			percentage: string;
			pixels: string;
			mantainAspect: string;
			action: string;
			download: string;
		};
		copyright: string;
	};
}
export const formatsOriginals = ['webp', 'png', 'jpeg', 'svg', 'gif'];
import Layout from '../layouts/Layout.astro';
import Radio from '../components/Radio.astro';
import Button from '../components/Button.astro';
import Check from '../components/Check.astro';
import InputField from '../components/InputField.astro';
import Logo from './Logo.astro';
const { texts } = Astro.props;
---

<Layout title={`${texts.title}`} language={texts.language} description={texts.description}>
	<main class="w-full pt-4 lg:pt-0 flex justify-center">
		<div class="flex flex-col lg:flex-row gap-8">
			<section class="flex flex-col items-center lg:max-w-xs px-4 justify-center gap-4">
				<div class="flex flex-col items-center gap-2">
					<Logo lang={texts.language} />
					<h1
						class="text-center lg:text-left font-bold text-4xl leading-12 bg-gradient-to-br from-action-dark to-action-light bg-clip-text text-transparent-fill"
					>
						{texts.title}
					</h1>
				</div>
				<p class="text-m">
					{texts.description}
				</p>
			</section>
			<div class="px-4">
				<section class="pt-8 lg-pt-0">
					<h2 class="text-primary tracking-wide font-bold text-3xl text-left my-4">
						{texts.inputs.titleUpload}
					</h2>
					<div class="flex items-center justify-center w-full pressed rounded-3xl py-4">
						<label
							for="upload"
							class="flex flex-col items-center justify-center w-full h-32 rounded-2xl cursor-pointer transition-colors"
						>
							<div class="flex flex-col items-center justify-center pt-5 pb-6">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="w-8 h-8 mb-4"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 16 16"
								>
									<path
										d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0M9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1M6.354 9.854a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 8.707V12.5a.5.5 0 0 1-1 0V8.707z"
									></path>
								</svg>
								<p class="mb-2 text-m">
									<span class="font-semibold">{texts.inputs.uploadMessage}</span>
								</p>
								<p class="text-xs"><p class="text-xs">{formatsOriginals.join(', ')}, etc.</p></p>
							</div>
							<input id="upload" multiple type="file" accept="image/*" class="hidden" />
						</label>
					</div>
				</section>
				<section class="pt-8 lg-pt-0" id="sectionUploads">
					<h2 class="text-primary tracking-wide font-bold text-3xl text-left my-4">
						{texts.inputs.actionsTitle}
					</h2>
					<div class="flex flex-col lg:flex-row gap-4">
						<div>
							<div id="image"></div>
							<canvas id="canvas" class="hidden" style="border:1px solid #ccc;"></canvas>
						</div>
						<div class="lg:w-lg">
							<div class="py-4">
								<Radio
									id="scaleMethod"
									options={[
										{
											value: 'percent',
											label: texts.inputs.percentage,
										},
										{
											value: 'pixels',
											label: texts.inputs.pixels,
										},
									]}
									name="mode"
									selected="percent"
									size="lg"
									disabled={false}
								/>
							</div>
							<div id="scalePercentContainer">
								<InputField
									id="scalePercent"
									name="scalePercent"
									type="number"
									size="md"
									min="0.0001"
									labelBefore={`${texts.inputs.percentage}:`}
									labelAfter="%"
								/>
							</div>
							<div id="scalePixelsContainer" class="hidden">
								<InputField
									id="width"
									name="width"
									type="number"
									size="md"
									labelBefore={`${texts.inputs.width}:`}
									labelAfter="px"
								/>
								<InputField
									id="height"
									name="height"
									type="number"
									size="md"
									labelBefore={`${texts.inputs.height}:`}
									labelAfter="px"
								/>
								<Check
									id="lockAspect"
									name="lockAspect"
									label={texts.inputs.mantainAspect}
									selected={true}
								/>
							</div>
						</div>
					</div>
				</section>
				<section class="flex gap-4 pt-4">
					<Button id="download" size="lg" disabled={true}>
						{texts.inputs.download}
					</Button>
				</section>
			</div>
		</div>
	</main>
	<footer class="text-center py-8 text-sm text-neutral">
		&copy; 2025 Readyfor.work - {texts.copyright}.
	</footer>

	<script>
		const upload = document.getElementById('upload');
		const canvas = document.getElementById('canvas');
		const ctx = canvas.getContext('2d');

		let originalImage = new Image();
		let originalWidth = 0;
		let originalHeight = 0;

		upload.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const reader = new FileReader();
			reader.onload = (event) => {
				originalImage.onload = () => {
					originalWidth = originalImage.width;
					originalHeight = originalImage.height;
					drawImage(originalWidth, originalHeight);
					document.getElementById('width').value = originalWidth;
					document.getElementById('height').value = originalHeight;
				};
				originalImage.src = event.target.result;

				let scaledImg = new Image();
				scaledImg.setAttribute('src', event.target.result);
				scaledImg.setAttribute('width', '200');
				scaledImg.setAttribute('height', '200');
				scaledImg.setAttribute('class', 'image-scaled card');
				const imageContainer = document.getElementById('image');
				if (imageContainer) {
					imageContainer.innerHTML = '';
					imageContainer.appendChild(scaledImg);
				}
			};
			reader.readAsDataURL(file);
			document.getElementById('download').disabled = false;
		});

		function drawImage(width, height) {
			canvas.width = width;
			canvas.height = height;
			ctx.drawImage(originalImage, 0, 0, width, height);
		}

		document.getElementById('download').addEventListener('click', () => {
			const mode = document.querySelector("input[name='mode']:checked").value;
			let newWidth = originalWidth;
			let newHeight = originalHeight;

			if (mode === 'percent') {
				const percent = parseFloat(document.getElementById('scalePercent').value) || 100;
				newWidth = (originalWidth * percent) / 100;
				newHeight = (originalHeight * percent) / 100;
			} else {
				const keepAspect = document.getElementById('lockAspect').checked;
				const inputWidth = parseInt(document.getElementById('width').value) || originalWidth;
				const inputHeight = parseInt(document.getElementById('height').value) || originalHeight;

				if (keepAspect) {
					const aspectRatio = originalHeight / originalWidth;
					newWidth = inputWidth;
					newHeight = Math.round(newWidth * aspectRatio);
					document.getElementById('height').value = newHeight;
				} else {
					newWidth = inputWidth;
					newHeight = inputHeight;
				}
			}

			drawImage(newWidth, newHeight);
			const link = document.createElement('a');
			link.download = 'imagen-escalada.png';
			link.href = canvas.toDataURL('image/png');
			link.click();
		});

		// Ajustar altura automáticamente si "mantener aspecto" está activo
		document.getElementById('width').addEventListener('input', () => {
			const keepAspect = document.getElementById('lockAspect').checked;
			if (keepAspect && originalWidth && originalHeight) {
				const inputWidth = parseInt(document.getElementById('width').value) || originalWidth;
				const aspectRatio = originalHeight / originalWidth;
				const autoHeight = Math.round(inputWidth * aspectRatio);
				document.getElementById('height').value = autoHeight;
			}
		});

		const radios = document.querySelectorAll('input[name="mode"]');

		radios.forEach((radio) => {
			radio.addEventListener('change', (e) => {
				if (e.target.checked) {
					const { value } = e.target;
					if (value === 'percent') {
						document.getElementById('scalePercentContainer').classList.remove('hidden');
						document.getElementById('scalePixelsContainer').classList.add('hidden');
					}
					if (value === 'pixels') {
						document.getElementById('scalePercentContainer').classList.add('hidden');
						document.getElementById('scalePixelsContainer').classList.remove('hidden');
					}
				}
			});
		});
	</script>
	<style>
		#image {
			min-width: 200px;
			min-height: 200px;
		}
	</style>
	<style is:global>
		.image-scaled {
			max-height: 200px;
			max-width: 200px;
			object-fit: contain;
			width: auto;
			height: auto;
			padding: 0.5em;
			border-radius: 0.5em;
		}

		.card {
			background: #212121;
			box-shadow:
				8px 8px 16px rgb(0, 0, 0, 0.5),
				-8px -8px 16px rgb(255, 255, 255, 0.1);
		}
	</style>
</Layout>
