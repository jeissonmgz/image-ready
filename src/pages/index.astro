---
import '../styles/global.css';
import Layout from '../layouts/Layout.astro';
import Avatar from '../assets/logo.svg';
import Anchor from '../components/Anchor.astro';
import Carousel from "../components/Carousel.astro";

export const formatsSupported = [
	{ format: 'webp', mymetype: 'image/webp' },
	{ format: 'png', mymetype: 'image/png' },
	{ format: 'jpeg', mymetype: 'image/jpeg' },
];
---

<Layout title="Jeisson Malaver">
	<div class="min-h-screen text-gray-800">
		<main class="w-full pt-4 lg:pt-0 flex justify-center">
			<div class="flex flex-col lg:flex-row gap-4">
				<section class="flex flex-col items-center lg:max-w-xs px-4 justify-center gap-4">
					<div class="flex flex-col items-center gap-2">
						<div class="outer-circle">
							<Avatar
								class="rounded-full inner-circle"
								width={100}
								height={100}
							/>
						</div>
						<div class="rounded-full circle"></div>
						<h1
							class="text-center lg:text-left font-bold text-4xl bg-gradient-to-br from-cyan-300 to-indigo-300 bg-clip-text text-transparent-fill"
						>
							Image Converter
						</h1>
					</div>
					<p class="text-sm">
						Convert, resize, crop and download your images - all from your browser. Free, fast and
						secure.
					</p>
					<div class="flex gap-4 py-4">
						{
							formatsSupported.map((item) => (
								<Anchor target="_blank" href={`/convert/${item.format}`} size="lg">
									{item.format}
								</Anchor>
							))
						}
					</div>
				</section>
				<div>
					<section class="pt-8 lg-pt-0">
						<h2 class="text-cyan-300 tracking-wide font-bold text-3xl text-center my-4">
							Upload files
						</h2>
						<div class="flex items-center justify-center w-full">
							<label
								for="file-upload"
								class="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-green-400 rounded-2xl cursor-pointer bg-green-50 hover:bg-green-100 transition-colors"
							>
								<div class="flex flex-col items-center justify-center pt-5 pb-6">
									<svg
										xmlns="http://www.w3.org/2000/svg"
										class="w-8 h-8 mb-4 text-green-500"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 16 16"
									>
										<path
											d="M8.5 11.5a.5.5 0 0 1-1 0V7.707L6.354 8.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 7.707z"
										></path>
										<path
											d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z"
										></path>
									</svg>
									<p class="mb-2 text-sm text-green-700">
										<span class="font-semibold">Click to upload</span> or drag & drop
									</p>
									<p class="text-xs text-green-500">SVG, PNG, JPG or GIF</p>
								</div>
								<input id="file-upload" multiple type="file" class="hidden" />
							</label>
						</div>
					</section>
					<section class="pt-8 lg-pt-0">
						<h2 class="text-cyan-300 tracking-wide font-bold text-3xl text-center my-4">
							Images Gallery
						</h2>
						<Carousel id="previews">
							
						</Carousel>
						<button
							id="download-all"
							class="mt-4 px-4 py-2 bg-green-600 text-white rounded cursor-pointer hover:bg-green-700 disabled:bg-gray-400"
							disabled
						>
							Download all
						</button>
					</section>
				</div>
			</div>
		</main>
		<section class="text-center py-20 px-6 md:px-20">
			<h1 class="text-5xl font-bold text-green-700 mb-4"></h1>
			<p class="text-lg md:text-xl mb-8 text-gray-600 max-w-2xl mx-auto"></p>
		</section>

		<section class="px-6 md:px-20 py-12 bg-white shadow-inner" id="editor">
			<!-- Editor tools will be dynamically mounted here -->
			<h2 class="text-3xl font-semibold text-green-700 mb-6">List images</h2>
			

			<div class="mt-10">
				
			</div>
		</section>

		<footer class="text-center py-8 text-sm text-gray-500">
			&copy; 2025 Readyfor.work - All rights reserved.
		</footer>
	</div>

	<div class="container">
		<div class="layout">
			<div></div>
			<div class="dropTarget"></div>
		</div>
	</div>
	<script>
		import type { JSX } from 'astro/jsx-runtime';

		import JSZip from 'jszip';
		import { saveAs } from 'file-saver';

		let refs = {
			imagePreviews: document.querySelector('#previews'),
			fileSelector: document.querySelector('input[type=file]'),
		};

		function addImageBox(container: JSX.Element) {

			const progressBox = document.createElement('div');
			progressBox.setAttribute("class", "skeleton")

			const itemCarouselCard = document.createElement('div');
			itemCarouselCard.setAttribute('class', 'card');
			itemCarouselCard.appendChild(progressBox);

			const itemCarousel = document.createElement('div');
			itemCarousel.setAttribute('class', 'item-carousel');
			itemCarousel.appendChild(itemCarouselCard);

			container.appendChild(itemCarousel);
			return itemCarousel;
		}

		let convertedImages: { url: string; filename: string }[] = [];

		function processFile(file: File) {
			if (!file) {
				return;
			}

			console.log(file);
			let imageBox = addImageBox(refs.imagePreviews);

			// Load the data into an image
			new Promise(function (resolve, reject) {
				let rawImage = new Image();
				rawImage.addEventListener('load', () => resolve(rawImage));
				rawImage.src = URL.createObjectURL(file);
			})
				.then(function (rawImage: any) {
					return new Promise(function (resolve, reject) {
						let canvas = document.createElement('canvas');
						let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

						canvas.width = rawImage.width;
						canvas.height = rawImage.height;
						ctx.drawImage(rawImage, 0, 0);

						canvas.toBlob(function (blob) {
							const url = URL.createObjectURL(blob);
							// Guardar la URL y nombre
							convertedImages.push({
								url,
								filename: `${file.name}-image-ready-for-work.webp`,
							});
							resolve(url);
							onImageConverted();
						}, 'image/webp');
					});
				})
				.then(function (imageURL: any) {
					return new Promise(function (resolve, reject) {
						let scaledImg = new Image();
						scaledImg.addEventListener('load', () => {
							resolve({ imageURL, scaledImg });
						});

						scaledImg.setAttribute('src', imageURL);
						scaledImg.setAttribute('width', '200');
						scaledImg.setAttribute('height', '200');
					});
				})
				.then(function (data: any) {
					let imageLink = document.createElement('a');
					imageLink.setAttribute('href', data.imageURL);
					imageLink.setAttribute('download', `${file.name}-image-ready-for-work.webp`);
					imageLink.appendChild(data.scaledImg);

					let itemCarouselCard = document.createElement('div');
					itemCarouselCard.setAttribute('class', 'card');
					itemCarouselCard.appendChild(imageLink);

					let itemCarousel = document.createElement('div');
					itemCarousel.setAttribute('class', 'item-carousel');
					itemCarousel.appendChild(itemCarouselCard);
					
					imageBox.innerHTML = '';
					imageBox.appendChild(itemCarousel);
				})
		}

		function processFiles(files) {
			for (let file of files) {
				processFile(file);
			}
		}

		function fileSelectorChanged() {
			processFiles(refs.fileSelector.files);
			refs.fileSelector.value = '';
		}

		refs.fileSelector.addEventListener('change', fileSelectorChanged);

		// Set up Drag and Drop
		function dragenter(e) {
			e.stopPropagation();
			e.preventDefault();
		}

		function dragover(e) {
			e.stopPropagation();
			e.preventDefault();
		}

		function drop(callback, e) {
			e.stopPropagation();
			e.preventDefault();
			callback(e.dataTransfer.files);
		}

		function setDragDrop(area: JSX.Element, callback) {
			area.addEventListener('dragenter', dragenter, false);
			area.addEventListener('dragover', dragover, false);
			area.addEventListener(
				'drop',
				function (e) {
					drop(callback, e);
				},
				false
			);
		}
		setDragDrop(document.documentElement, processFiles);

		const downloadAllBtn = document.getElementById('download-all') as HTMLButtonElement;

		function updateDownloadButtonState() {
			downloadAllBtn.disabled = convertedImages.length === 0;
		}

		downloadAllBtn.addEventListener('click', async () => {
			const zip = new JSZip();

			const promises = convertedImages.map(async ({ url, filename }) => {
				const res = await fetch(url);
				const blob = await res.blob();
				zip.file(filename, blob);
			});

			await Promise.all(promises);
			const content = await zip.generateAsync({ type: 'blob' });
			saveAs(content, 'converted-images.zip');
		});

		// Llama esta función después de cada archivo convertido
		function onImageConverted() {
			updateDownloadButtonState();
			document.querySelector('#previews')?.scrollIntoView({
				behavior: 'smooth',
			});
		}
	</script>
	<style is:global>
		.card {
			background: #212121;
			box-shadow:
				8px 8px 16px rgb(0, 0, 0, 0.5),
				-8px -8px 16px rgb(255, 255, 255, 0.1);
		}
		.item-carousel {
			height: 100%;
			display: flex;
			align-items: center;
			min-width: 225px;
			max-width: 225px;
			padding: 2rem; /* 8 * 0.25rem = 2rem */
		}
		.skeleton {
			width: 200px;
			height: 200px; /* h-24 = 24 * 0.25rem */
			background-color: #d1d5db; /* bg-gray-300 */
			border-radius: 0.25rem; /* rounded */
			animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
		}
	</style>
	<style>
		main {
			background-color: #212121;
			color: white;
		}

		.circle {
			background-color: #212121;
			box-shadow:
				28px 28px 50px rgba(255, 255, 255, 0.16),
				/* Sombra clara exterior */ inset 26px 26px 48px rgba(255, 255, 255, 0.16),
				/* Sombra clara interior */ inset -31px -31px 43px rgba(255, 255, 255, 0.64),
				/* Sombra más pronunciada interior */ inset -23px -23px 45px rgba(255, 255, 255, 1); /* Sombra fuerte interior */
		}

		.outer-circle {
			width: 150px;
			height: 150px;
			border-radius: 50%;
			background: linear-gradient(145deg, #1e1e1e, #232323);
			box-shadow:
				inset 4px 4px 8px rgb(0, 0, 0, 0.4),
				inset -4px -4px 8px rgb(255, 255, 255, 0.2),
				4px 4px 8px rgb(0, 0, 0, 0.1),
				-4px -4px 8px rgb(255, 255, 255, 0.1);
			display: flex;
			align-items: center;
			justify-content: center;
		}

		.inner-circle {
			width: 100px;
			height: 100px;
			border-radius: 50%;
			background: #212121;
			box-shadow:
				8px 8px 16px rgb(0, 0, 0, 0.5),
				-8px -8px 16px rgb(255, 255, 255, 0.3);
		}
		.text-transparent-fill {
			-webkit-text-fill-color: transparent;
		}
		.card {
			background: #212121;
			box-shadow:
				8px 8px 16px rgb(0, 0, 0, 0.5),
				-8px -8px 16px rgb(255, 255, 255, 0.1);
		}
	</style>
</Layout>
